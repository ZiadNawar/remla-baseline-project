  name: Multi-label-classification
  
  on: 
    push: 
      # tags: ["v[0-9]+.[0-9]+.[0-9]+"]
  
  jobs:
    init:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Install python version
          # use the pyenv-action version 7
          uses: gabrielfalcao/pyenv-action@v7

          with:
            default: 3.8.6 # pick 3.8.6 verion
            command: pip install -U pip  # upgrade pip after installing python

        - name: Parse version info from tag
          run: |
            # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 characters.
            VERSION=${GITHUB_REF:11}
            MAJOR=`echo "$VERSION" | cut -d . -f 1`
            MINOR=`echo "$VERSION" | cut -d . -f 2`
            PATCH=`echo "$VERSION" | cut -d . -f 3`
            echo "version=$VERSION" >> $GITHUB_ENV
            echo "version_major=$MAJOR" >> $GITHUB_ENV
            echo "version_minor=$MINOR" >> $GITHUB_ENV
            echo "version_patch=$PATCH" >> $GITHUB_ENV

        - name: 9-remla-multilabel
          run: |
           echo $VERSION
           echo ${{ env.version }}

        - name: Login to registry
          run: echo "${{ secrets.GITHUB_TOKEN }}" docker login ghcr.io -u ${{ github.actor }} --password-stdin

        # - name: Set lower case owner name
        #   run: |
        #     echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        #   env:
        #     OWNER: '${{ github.repository_owner }}'
 
    build:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2

        - name: Lowercase REPO
          run: |
            echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

        - name: Build and push
          run: |
            IMG=ghcr.io/$REPO
            docker build \
              -t $IMG:latest \
              -t $IMG:${{ env.version_major }}-latest \
              -t $IMG:${{ env.version_major }}.${{ env.version_minor }}-latest \
              -t $IMG:${{ env.version }} \
              .
            docker push --all-tags $IMG

        - name: Install python version
          # use the pyenv-action version 7
          uses: gabrielfalcao/pyenv-action@v7

          with:
            default: 3.8.6 # pick 3.8.6 verion
            command: pip install -U pip  # upgrade pip after installing python

        - name: Create environment
          run: pyenv local 3.8.6 && python -mvenv .venv386

        - name: Install dependencies
          run: pip install -r requirements.txt --upgrade pip

        - name: Debug pyenv
          run: echo ${{ steps.pyenv_installation.outputs.pyenv_root }}

        - name: Run static analysis
          run: pylint --load-plugins=dslinter --disable=invalid-name,too-many-locals --max-line-length=120 --output-format=text:report.txt,colorized --reports=n src/

        